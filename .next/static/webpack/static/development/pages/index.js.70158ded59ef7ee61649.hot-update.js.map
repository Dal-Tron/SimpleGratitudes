{"version":3,"file":"static/webpack/static/development/pages/index.js.70158ded59ef7ee61649.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, { Component } from 'react'\nimport pdfMake from 'pdfmake/build/pdfmake'\nimport { loadDB } from '../lib/db'\nimport pdfFonts from '../static/js/vfs_fonts'\nimport { generateUniqueID } from '../lib/helpers'\nimport pdfFontConfig from '../components/pdf/pdfFontConfig'\nimport pdfContent from '../components/pdf/content'\n\nimport Head from 'next/head'\nimport Brand from '../components/index/Brand'\nimport Clock from '../components/index/Clock'\nimport Quotes from '../components/index/Quotes'\nimport Text from '../components/shared/Text'\nimport Footer from '../components/shared/Footer'\n\nclass Index extends Component {\n  state = {\n    timestring: '',\n    quotes: [\n      {\n        \"text\": \"Gratitude is a powerful catalyst for happiness. It's the spark that lights a fire of joy in your soul.\",\n        \"author\": \"Amy Collette\"\n      },\n    ],\n    gratitudes: {\n      \"gratitude-0\": \"\"\n    },\n    visions: {\n      \"vision-0\": \"\"\n    }\n  }\n\n  componentDidMount() {\n    this.handleCreateTimeString()\n    this.timer = setInterval(() => this.handleCreateTimeString(), 1000)\n    this.props.quotes && this.setState({\n      quotes: [...this.state.quotes, ...this.props.quotes]\n    })\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer)\n  }\n\n  handleCreateTimeString() {\n    const date = new Date();\n    const weekdays = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\"\n    ];\n\n    const months = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\"\n    ];\n\n    const weekday = weekdays[date.getDay()];\n    const month = months[date.getMonth()];\n    const intDay = date.getDate();\n    const year = date.getFullYear();\n    const timestamp = date.toTimeString()\n    const H = timestamp.substr(0, 2)\n    const h = H % 12 || 12\n    const ampm = (H < 12 || H === 24) ? \" AM\" : \" PM\"\n    const time = h + timestamp.substr(2, 3) + ampm\n    const timestring = `${weekday}, ${month} ${intDay}, ${year}, ${time}`;\n\n    this.setState({ timestring })\n  }\n\n  handleAddGratitude = () => {\n    const gratitudeID = `gratitude-${generateUniqueID()}`\n    let gratitude = {}\n    gratitude[gratitudeID] = \"\"\n    const gratitudes = Object.assign({}, this.state.gratitudes, gratitude)\n    this.setState({\n      gratitudes\n    })\n  }\n\n  handleAddVision = () => {\n    const visionID = `vision-${generateUniqueID()}`\n    let vision = {}\n    vision[visionID] = \"\"\n    const visions = Object.assign({}, this.state.visions, vision)\n    this.setState({\n      visions\n    })\n  }\n\n  handleRemoveGratitude = key => {\n    if (key !== \"gratitude-0\") {\n      const { gratitudes } = this.state\n      delete gratitudes[key]\n      this.setState({\n        gratitudes\n      })\n    }\n  }\n\n  handleRemoveVision = key => {\n    if (key !== \"vision-0\") {\n      const { visions } = this.state\n      delete visions[key]\n      this.setState({\n        visions\n      })\n    }\n  }\n\n  handleSaveGratitude = e => {\n    const { gratitudes } = this.state\n    const id = e.target.id\n    const gratitudeText = e.target.value\n    gratitudes[id] = gratitudeText\n    this.setState({\n      gratitudes\n    })\n  }\n\n  handleSaveVision = e => {\n    const { visions } = this.state\n    const id = e.target.id\n    const visionText = e.target.value\n    visions[id] = visionText\n    this.setState({\n      visions\n    })\n  }\n\n  handleCreatePDF = () => {\n    pdfMake.vfs = pdfFonts\n    const {\n      timestring,\n      gratitudes,\n      visions\n    } = this.state\n\n    console.log('hello')\n\n    pdfMake.fonts = pdfFontConfig\n    const content = pdfContent(timestring)\n\n    if (Object.keys(gratitudes).length > 0) {\n      Object.keys(gratitudes).map((key, index) => {\n        let gratitude = {\n          text: gratitudes[key],\n          style: ['section5']\n        }\n        // just start at index 5 as there are several headings (currently 4) inserted first\n        content.splice(index + 4, 0, gratitude)\n      })\n    }\n\n    if (Object.keys(visions).length > 0) {\n      Object.keys(visions).map((key, index) => {\n        let vision = {\n          text: visions[key],\n          style: ['section5']\n        }\n        // visions are currently at the end, so we can just push\n        content.push(vision)\n      })\n    }\n\n    const docDefinition = {\n      info: {\n        title: 'Grateful Vision',\n        author: 'Grateful Vision',\n        subject: 'Grateful Vision',\n        keywords: 'Grateful Vision',\n      },\n      pageMargins: [0, 0, 0, 0],\n      content,\n      styles: {\n        header: {\n          fontSize: 22,\n          alignment: 'center',\n        },\n        section1: {\n          color: '#5190a5',\n          font: 'Righteous',\n          margin: [0, 20, 0, 0]\n        },\n        section2: {\n          color: '#5190a5',\n          font: 'Snippet',\n        },\n        section3: {\n          color: '#5190a5',\n          font: 'CodyStar-Light',\n          margin: [0, 20, 0, 0]\n        },\n        section4: {\n          color: '#5190a5',\n          font: 'CodyStar-Light',\n          margin: [0, 20, 0, 0]\n        },\n        section5: {\n          color: '#5190a5',\n          font: 'OpenSans-Regular',\n          margin: [180, 20, 180, 0],\n          fontSize: 14,\n          alignment: 'center'\n        }\n      }\n    }\n\n    pdfMake.createPdf(docDefinition).open()\n  }\n\n  render() {\n    const {\n      timestring,\n      quotes,\n      gratitudes,\n      visions,\n    } = this.state\n    const renderGratitudes = Object.keys(gratitudes).map((key, index) => <Text\n      key={index}\n      id={key}\n      text={gratitudes[key]}\n      handleRemoveText={() => this.handleRemoveGratitude(key)}\n      handleSaveText={this.handleSaveGratitude}\n      rows=\"4\"\n      label=\"Gratitude\"\n    />)\n\n    const renderVisions = Object.keys(visions).map((key, index) => <Text\n      key={index}\n      id={key}\n      text={visions[key]}\n      handleRemoveText={() => this.handleRemoveVision(key)}\n      handleSaveText={this.handleSaveVision}\n      rows=\"4\"\n      label=\"Vision\"\n    />)\n\n    return (\n      <div className=\"page-wrapper\">\n        <Head>\n          <meta name=\"viewport\" content=\"initial-scale=1.0, width=device-width\" />\n        </Head>\n        <Brand />\n        <Clock timestring={timestring} />\n        <Quotes quotes={quotes} />\n        <section className=\"gratitudes\">\n          {renderGratitudes}\n          <div onClick={this.handleAddGratitude} className=\"section-header\">+</div>\n        </section>\n        <section className=\"visions\">\n          {renderVisions}\n          <div onClick={this.handleAddVision} className=\"section-header\">+</div>\n        </section>\n        <Footer handleCreatePDF={() => this.handleCreatePDF} />\n        <style jsx global>{`\n      @font-face {\n        font-family: ZillaSlab;\n        src: url(\"/static/fonts/ZillaSlab.ttf\") format(\"truetype\");\n      }\n      @font-face {\n        font-family: CodyStarLight;\n        src: url(\"/static/fonts/CodyStar-Light.ttf\") format(\"truetype\");\n      }\n      @font-face {\n        font-family: Righteous;\n        src: url(\"/static/fonts/Righteous.ttf\") format(\"truetype\");\n      }\n      @font-face {\n        font-family: Snippet;\n        src: url(\"/static/fonts/Snippet.ttf\") format(\"truetype\");\n      }\n      * {\n        box-sizing: border-box;\n      }\n      html,\n      body {\n        margin: 0;\n        padding: 0;\n        overflow: scroll;\n        margin-bottom: 6rem;\n        background: #b0edc5;\n      }\n      .absCenter {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n      }\n      .inline {\n        display: inline-block;\n      }\n      .section-header {\n        text-align: center;\n        padding: 2rem;\n        color: white;\n        font-size: 2.5rem;\n        font-family: Sans-Serif, Arial;\n      }\n      .gratitudes {\n        background: lightblue;\n      }\n      .visions {\n        background: lightblue;\n      }\n    `}</style>\n      </div>\n    )\n  }\n}\n\nIndex.getInitialProps = async function () {\n  const db = await loadDB()\n  let quotes = []\n  const querySnapshot = await db.firestore().collection('quotes').get()\n  querySnapshot.forEach(doc => {\n    quotes.push(doc.data())\n  })\n\n  return {\n    quotes\n  }\n}\n\nexport default Index"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AADA;AAGA;AACA;AADA;AAXA;AACA;AAoEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AALA;AAxBA;AATA;AA2CA;AACA;AACA;;;;;;AAjMA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AAUA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;;;AA+IA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAfA;AAAA;AAAA;AAqEA;;;;AApTA;AACA;AAsTA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AANA;AASA;AADA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;;;;A","sourceRoot":""}